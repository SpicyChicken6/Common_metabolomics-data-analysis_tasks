---
title: "Real dataset tutorial -- PCA plot"
format:
  html:
    code-fold: true
jupyter: python3
---


**Goal of this real dataset tutorial**

In this tutorial using real dataset, we want to see if we can answer the following biological question:
Can we see the pattern of clustering based on different proportions of barley grain fed in the cows?

**Dataset description**

"Metabolite concentrations of 39 rumen samples measured by proton NMR from dairy cows fed with different proportions of barley grain (Ametaj BN, et al.). Group label - 0, 15, 30, or 45 - indicating the percentage of grain in diet."

**Step by step installation and running**

Let's get started! First, we need to install the package.\
Steps:
  1. Git clone or download the github folder;\
  2. Open the terminal, and go to this folder;\
  3. Enter \
  `pip install dist/metabolomics_analysis_tools-0.1.0.tar.gz` to install the package locally;

Then, we can import functions we will use for this demo from the package metabolomics_analysis_tools@import_functions.

```{python}
#| label: import_functions

import metabolomics_analysis_tools.data_preprocessing.data_reading as dr
import metabolomics_analysis_tools.data_preprocessing.normalization as dn
import metabolomics_analysis_tools.stats_analyses.analyses as sa
import metabolomics_analysis_tools.data_preprocessing.data_check as dc
import warnings
warnings.filterwarnings('ignore')
```

1. Then we can use the data_reading module to read in the data, by default it will read in the data from the resources/test_dataset folder in the package. \
We can also use the data_reading module to read in the data from a custom path, by passing the path as an argument to the read_data_file function (file_path='path/to/file.csv').\
The read_data_file function will return a pandas dataframe. \

```{python}
#| label: read_data
df=dr.read_data_file()
df.head()
```

We can use the data_check module to check if the data is normally distributed.\
The normal_dist_check function will return true if the data is  normally distributed, false otherwise

```{python}
#| label: check_data
dc.normal_dist_check(df)
```

2. Next we can use the normalization module to normalize the data, here we will use the median normalization method
normalized_data=dn.normalize_by_median(df).\
We can have a look at the first 5 rows of the normalized data
normalized_data.head().\


```{python}
#| label: normalize_data
normalized_data=dn.normalize_by_median(df)
normalized_data.head()
```

3. We can use the analyses module to perform statistical analyses on the data.\
Here we will first perform a PCA analysis on the data to see if there are any patterns in the data.\
The PCA_analysis function will return a pandas dataframe containing the principal components
principal_components=sa.PCA_analysis(normalized_data).

```{python}
#| label: perform_pca
principal_components=sa.PCA_analysis(normalized_data)
```

  - Interpretation of the PCA results:\
 From the PCA results, we can see it is hard to distinguish the groups of cows bsaed on their different feeding plan (indicated by colors). However, the first two PCs explained most of the variance in the data. Therefore, even though the clustering didn't give us a good pattern for different groups of data, I might assume that it was due to limited number of samples. If we have more samples, we might be able to see a better pattern.\


